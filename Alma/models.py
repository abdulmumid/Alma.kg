from django.db import models
from django.utils.text import slugify
from django.conf import settings
from django.contrib.gis.db import models as geomodels
from ckeditor_uploader.fields import RichTextUploadingField
from django.utils import timezone

# üìå –î–æ—Å–∫–∞
class Board(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    slug = models.SlugField("Slug", unique=True, blank=True)
    description = RichTextUploadingField("–û–ø–∏—Å–∞–Ω–∏–µ")
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='boards/')
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–î–æ—Å–∫–∞"
        verbose_name_plural = "–î–æ—Å–∫–∏"
        ordering = ["-created_at"]


# üìå –ú–∞–≥–∞–∑–∏–Ω
class Store(geomodels.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", max_length=255)
    address = models.CharField("–ê–¥—Ä–µ—Å", max_length=255)
    location = geomodels.PointField("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞)", geography=True)
    is_open_24h = models.BooleanField("–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", default=False)
    working_hours = models.CharField("–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", max_length=100, blank=True)

    def __str__(self):
        return f"{self.name} ‚Äî {self.address}"

    class Meta:
        verbose_name = "–ú–∞–≥–∞–∑–∏–Ω"
        verbose_name_plural = "–ú–∞–≥–∞–∑–∏–Ω—ã"
        ordering = ["name"]


# üìå –ê–∫—Ü–∏—è
class Stock(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ", blank=True)
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='stock/')
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–ê–∫—Ü–∏—è"
        verbose_name_plural = "–ê–∫—Ü–∏–∏"
        ordering = ["-created_at"]


# üìå –°—Ç–æ—Ä–∏—Å
class Story(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=100)
    icon = models.ImageField("–ò–∫–æ–Ω–∫–∞", upload_to='stories/')
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω–æ", default=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    def __str__(self):
        return f"{self.title} {'‚úÖ' if self.is_active else '‚ùå'}"

    class Meta:
        verbose_name = "–°—Ç–æ—Ä–∏—Å"
        verbose_name_plural = "–°—Ç–æ—Ä–∏—Å—ã"
        ordering = ["-created_at"]


# ‚ö° –°—Ä–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
class HurryBuy(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    price = models.DecimalField("–¶–µ–Ω–∞", max_digits=8, decimal_places=2)
    format_price = models.CharField("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", max_length=255, blank=True, null=True)
    percent_discount = models.DecimalField("–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏", max_digits=5, decimal_places=2, blank=True, null=True)
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='hurry_buy/')
    start_date = models.DateTimeField("–ù–∞—á–∞–ª–æ")
    end_date = models.DateTimeField("–û–∫–æ–Ω—á–∞–Ω–∏–µ")
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    @property
    def is_active(self):
        now = timezone.now()
        return self.start_date <= now <= self.end_date

    def clean(self):
        if self.start_date >= self.end_date:
            raise ValueError("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞")

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–°—Ä–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞"
        verbose_name_plural = "–°—Ä–æ—á–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏"
        ordering = ["-start_date"]


# üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class Notification(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    message = models.TextField("–°–æ–æ–±—â–µ–Ω–∏–µ")
    is_read = models.BooleanField("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ", default=False)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)

    def __str__(self):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {self.user} ‚Äî {'‚úî' if self.is_read else '‚úñ'}"

    class Meta:
        verbose_name = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        verbose_name_plural = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        ordering = ["-created_at"]
