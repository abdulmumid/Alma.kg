from rest_framework import serializers
from .models import *
from Product.models import Product
from Product.serializers import ProductSerializer


# üìà –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π / –∞–∫—Ü–∏–π
class BoardSerializer(serializers.ModelSerializer):
    class Meta:
        model = Board
        fields = ['id', 'title', 'slug', 'description', 'image', 'created_at', 'updated_at']
        read_only_fields = ['slug', 'created_at', 'updated_at']


# üéØ –ê–∫—Ü–∏–∏
class StockSerializer(serializers.ModelSerializer):
    class Meta:
        model = Stock
        fields = '__all__'


# üì¢ –°—Ç–æ—Ä–∏—Å—ã
class StorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Story
        fields = '__all__'


# üìç –ú–∞–≥–∞–∑–∏–Ω
class StoreSerializer(serializers.ModelSerializer):
    distance_km = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = Store
        fields = ["id", "name", "address", "location", "is_open_24h", "working_hours", "distance_km"]

    def get_distance_km(self, obj):
        """–ï—Å–ª–∏ –≤ queryset –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π distance, –≤–µ—Ä–Ω—ë–º –µ–≥–æ –≤ –∫–º"""
        return round(obj.distance.km, 2) if hasattr(obj, "distance") else None


# ‚ö°Ô∏è –ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞
class HurryBuySerializer(serializers.ModelSerializer):
    class Meta:
        model = HurryBuy
        fields = '__all__'


