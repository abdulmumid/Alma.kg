from django.contrib import admin, messages
from django.utils.safestring import mark_safe
from django.contrib.auth import get_user_model
from leaflet.admin import LeafletGeoAdmin

from .models import (
    HurryBuy, Notification, Board, Stock, Story, Store
)

User = get_user_model()


# üîπ –ú–∏–∫—Å–∏–Ω –¥–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class ImagePreviewMixin:
    def image_preview(self, obj):
        if hasattr(obj, 'image') and obj.image:
            return mark_safe(f'<img src="{obj.image.url}" style="max-height:100px; max-width:100px;" />')
        return '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    image_preview.short_description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'


# üìå –î–æ—Å–∫–∏
@admin.register(Board)
class BoardAdmin(ImagePreviewMixin, admin.ModelAdmin):
    list_display = ('title', 'slug', 'image_preview', 'created_at', 'updated_at')
    prepopulated_fields = {"slug": ("title",)}
    search_fields = ('title',)
    readonly_fields = ('image_preview', 'created_at', 'updated_at')


# üìå –ê–∫—Ü–∏–∏
@admin.register(Stock)
class StockAdmin(ImagePreviewMixin, admin.ModelAdmin):
    list_display = ('title', 'image_preview', 'created_at', 'updated_at')
    readonly_fields = ('image_preview', 'created_at', 'updated_at')
    fields = ('title', 'description', 'image', 'image_preview', 'created_at', 'updated_at')


# üìå –°—Ç–æ—Ä–∏—Å—ã
@admin.register(Story)
class StoryAdmin(ImagePreviewMixin, admin.ModelAdmin):
    list_display = ('title', 'image_preview', 'is_active', 'created_at', 'updated_at')
    search_fields = ('title',)
    list_filter = ('is_active',)
    readonly_fields = ('image_preview', 'created_at', 'updated_at')


# üìå –ú–∞–≥–∞–∑–∏–Ω—ã
@admin.register(Store)
class StoreAdmin(LeafletGeoAdmin):
    list_display = ("name", "address", "is_open_24h", "working_hours")
    search_fields = ("name", "address")
    list_filter = ("is_open_24h",)


# üìå –°—Ä–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
@admin.register(HurryBuy)
class HurryBuyAdmin(ImagePreviewMixin, admin.ModelAdmin):
    list_display = ('title', 'price', 'percent_discount', 'start_date', 'end_date', 'created_at', 'updated_at', 'image_preview')
    search_fields = ('title',)
    readonly_fields = ('image_preview', 'created_at', 'updated_at')


# üìå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = ('user', 'message', 'is_read', 'created_at')
    search_fields = ('user__phone', 'user__email', 'message')
    list_filter = ('is_read', 'created_at')
    readonly_fields = ('created_at',)
    actions = ['send_to_all_users']

    @admin.action(description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    def send_to_all_users(self, request, queryset):
        users = list(User.objects.only('id'))  # —Ç–æ–ª—å–∫–æ id –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        notifications = [
            Notification(user=user, message=obj.message)
            for obj in queryset
            for user in users
        ]
        Notification.objects.bulk_create(notifications, batch_size=500)
        self.message_user(
            request,
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).",
            level=messages.SUCCESS
        )
