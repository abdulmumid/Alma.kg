from django.db import models
from django.utils.text import slugify
from Alma.models import Store  
from django.db import models
from django.conf import settings


# –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
class Category_Product(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=100)
    slug = models.SlugField("Slug", unique=True, blank=True)
    image = models.ImageField(upload_to='categories/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"


# –ü—Ä–æ–¥—É–∫—Ç
class Product(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    category = models.ForeignKey(Category_Product, on_delete=models.CASCADE, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    price = models.DecimalField("–¶–µ–Ω–∞", max_digits=8, decimal_places=2)
    discount = models.DecimalField("–°–∫–∏–¥–∫–∞ %", max_digits=5, decimal_places=2, blank=True, null=True)
    image = models.ImageField(upload_to='products/')
    barcode = models.CharField("–®—Ç—Ä–∏—Ö–∫–æ–¥", max_length=100, unique=True)
    label = models.CharField("–ù–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã", max_length=50, blank=True)
    is_featured = models.BooleanField("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", default=False)
    store = models.ForeignKey(Store, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ú–∞–≥–∞–∑–∏–Ω")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    @property
    def final_price(self):
        if self.discount:
            return self.price * (1 - self.discount / 100)
        return self.price

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ü—Ä–æ–¥—É–∫—Ç"
        verbose_name_plural = "–ü—Ä–æ–¥—É–∫—Ç—ã"


# üõí –ö–æ—Ä–∑–∏–Ω–∞
class Cart(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="cart")
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)

    def __str__(self):
        return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user}"

    def get_total(self):
        return sum(item.get_total_price() for item in self.items.select_related("product"))

    class Meta:
        verbose_name = "–ö–æ—Ä–∑–∏–Ω–∞"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω—ã"


# üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name='items')
    product = models.ForeignKey('Product', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", default=1)
    created_at = models.DateTimeField("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", auto_now_add=True)
    updated_at = models.DateTimeField("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_now=True)

    def __str__(self):
        return f"{self.product} √ó {self.quantity}"

    def get_total_price(self):
        return self.product.price * self.quantity

    class Meta:
        unique_together = ('cart', 'product')
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã"
        verbose_name_plural = "–≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã"


# üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
class Address(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    street = models.CharField("–£–ª–∏—Ü–∞", max_length=255)
    house = models.CharField("–î–æ–º", max_length=50)
    corpus = models.CharField("–ö–æ—Ä–ø—É—Å", max_length=50, blank=True, null=True)
    entrance = models.CharField("–ü–æ–¥—ä–µ–∑–¥", max_length=50, blank=True, null=True)
    floor = models.CharField("–≠—Ç–∞–∂", max_length=50, blank=True, null=True)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)

    def __str__(self):
        return f"{self.street}, {self.house}" + (f" (–∫–æ—Ä–ø. {self.corpus})" if self.corpus else "")

    class Meta:
        verbose_name = "–ê–¥—Ä–µ—Å"
        verbose_name_plural = "–ê–¥—Ä–µ—Å–∞"
        ordering = ["-created_at"]


# üßæ –ó–∞–∫–∞–∑
class Order(models.Model):
    STATUS_CHOICES = [
        ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('processing', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        ('shipped', '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'),
        ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
        ('cancelled', '–û—Ç–º–µ–Ω—ë–Ω'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="orders")
    address = models.ForeignKey(Address, on_delete=models.CASCADE)
    comment = models.TextField("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", blank=True)
    total = models.DecimalField("–°—É–º–º–∞", max_digits=10, decimal_places=2)
    status = models.CharField("–°—Ç–∞—Ç—É—Å", max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.pk} ‚Äî {self.get_status_display()} ({self.total}‚ÇΩ)"

    def get_total_items(self):
        return sum(item.quantity for item in self.items.all())

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"
        ordering = ['-created_at']


# üßæ –¢–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑–µ
class OrderItem(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
    product = models.ForeignKey('Product', on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    price = models.DecimalField("–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É", max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.product} √ó {self.quantity}"

    def get_total_price(self):
        return self.price * self.quantity

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞"
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞"
