from django.db import models
from django.utils.text import slugify
from Alma.models import Store
from django.conf import settings
from User.models import UserBonus, BonusTransaction  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã


# üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
class Category_Product(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=100)
    slug = models.SlugField("Slug", unique=True, blank=True)
    image = models.ImageField(upload_to='categories/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
        ordering = ["name"]


# üìå –ü—Ä–æ–¥—É–∫—Ç
class Product(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    category = models.ForeignKey(Category_Product, on_delete=models.CASCADE, verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    price = models.DecimalField("–¶–µ–Ω–∞", max_digits=8, decimal_places=2)
    discount = models.DecimalField("–°–∫–∏–¥–∫–∞ %", max_digits=5, decimal_places=2, blank=True, null=True)
    image = models.ImageField(upload_to='products/')
    barcode = models.CharField("–®—Ç—Ä–∏—Ö–∫–æ–¥", max_length=100, unique=True)
    bonus_points = models.PositiveIntegerField("–ë–æ–Ω—É—Å—ã –∑–∞ –ø–æ–∫—É–ø–∫—É", default=0)
    is_featured = models.BooleanField("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", default=False)
    store = models.ForeignKey(Store, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ú–∞–≥–∞–∑–∏–Ω")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    @property
    def final_price(self):
        if self.discount:
            return self.price * (1 - self.discount / 100)
        return self.price

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ü—Ä–æ–¥—É–∫—Ç"
        verbose_name_plural = "–ü—Ä–æ–¥—É–∫—Ç—ã"
        ordering = ["name"]

    # ‚ö° –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞
    def award_bonus_to_user(self, user):
        if self.bonus_points > 0:
            user_bonus, created = UserBonus.objects.get_or_create(user=user)
            user_bonus.add_points(
                points=self.bonus_points,
                description=f"–ë–æ–Ω—É—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞: {self.name}"
            )
