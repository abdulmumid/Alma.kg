from django.contrib.gis.db import models as gis_models
from django.db import models
from django.utils.translation import gettext_lazy as _
from django.conf import settings
from Product.models import Product

User = settings.AUTH_USER_MODEL

# üõí –ö–æ—Ä–∑–∏–Ω–∞
class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="carts", verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), auto_now_add=True)
    updated_at = models.DateTimeField(_("–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"), auto_now=True)
    is_active = models.BooleanField(_("–ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞"), default=True)

    class Meta:
        verbose_name = _("–ö–æ—Ä–∑–∏–Ω–∞")
        verbose_name_plural = _("–ö–æ—Ä–∑–∏–Ω—ã")

    def __str__(self):
        return f"–ö–æ—Ä–∑–∏–Ω–∞ {self.user} ({'–∞–∫—Ç–∏–≤–Ω–∞—è' if self.is_active else '–∑–∞–∫—Ä—ã—Ç–∞'})"

    @property
    def total_price(self):
        """–°—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""
        return sum(item.get_total_price() for item in self.items.all())


# üõçÔ∏è –≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
class CartItem(models.Model):
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name="items", verbose_name=_("–ö–æ—Ä–∑–∏–Ω–∞"))
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name=_("–ü—Ä–æ–¥—É–∫—Ç"))
    quantity = models.PositiveIntegerField(_("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"), default=1)

    class Meta:
        verbose_name = _("–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        verbose_name_plural = _("–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ")

    def get_total_price(self):
        return self.product.final_price * self.quantity

    def __str__(self):
        return f"{self.product.name} √ó {self.quantity}"


# üßæ –ó–∞–∫–∞–∑
class Order(gis_models.Model):
    STATUS_CHOICES = (
        ("pending", _("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ")),
        ("confirmed", _("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")),
        ("delivered", _("–î–æ—Å—Ç–∞–≤–ª–µ–Ω")),
        ("canceled", _("–û—Ç–º–µ–Ω–µ–Ω")),
    )

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders", verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))
    cart = models.OneToOneField(Cart, on_delete=models.CASCADE, related_name="order", verbose_name=_("–ö–æ—Ä–∑–∏–Ω–∞"))
    address = models.ForeignKey("User.DeliveryAddress", on_delete=models.CASCADE, verbose_name=_("–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"))
    total_price = models.DecimalField(_("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞"), max_digits=10, decimal_places=2, default=0)
    used_bonus_points = models.PositiveIntegerField(_("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã"), default=0)
    status = models.CharField(_("–°—Ç–∞—Ç—É—Å"), max_length=20, choices=STATUS_CHOICES, default="pending")
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), auto_now_add=True)

    class Meta:
        verbose_name = _("–ó–∞–∫–∞–∑")
        verbose_name_plural = _("–ó–∞–∫–∞–∑—ã")

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ ‚Ññ{self.id} ‚Äî {self.user}"

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç total_price –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏."""
        if self.cart:
            total = self.cart.total_price
            if self.used_bonus_points:
                total -= self.used_bonus_points
                total = max(total, 0)
            self.total_price = total
        super().save(*args, **kwargs)

    def apply_bonuses(self):
        """–°–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞."""
        user_bonus = getattr(self.user, "bonus", None)
        if user_bonus and self.used_bonus_points > 0:
            user_bonus.spend_points(points=self.used_bonus_points, description=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{self.id}")

    def award_bonuses(self):
        """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É."""
        for item in self.cart.items.all():
            if hasattr(item.product, "award_bonus_to_user"):
                item.product.award_bonus_to_user(self.user)


# üåç –†–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
class DeliveryRegion(models.Model):
    name = models.CharField(_("–†–µ–≥–∏–æ–Ω"), max_length=100, unique=True)

    class Meta:
        verbose_name = _("–†–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
        verbose_name_plural = _("–†–µ–≥–∏–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏")

    def __str__(self):
        return self.name
