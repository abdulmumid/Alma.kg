from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.utils import timezone
from django.utils.translation import gettext_lazy as _
from django.core.mail import send_mail
from django.core.files.base import ContentFile
from io import BytesIO
from uuid import uuid4
import qrcode
from phonenumber_field.modelfields import PhoneNumberField
from django.conf import settings


# --- –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class CustomUserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra):
        if not email:
            raise ValueError(_("Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"))
        email = self.normalize_email(email)
        user = self.model(email=email, **extra)
        if password:
            user.set_password(password)
        else:
            user.set_unusable_password()
        # –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ create_superuser
        user.is_active = extra.get("is_active", False)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, **extra):
        extra.setdefault("is_staff", True)
        extra.setdefault("is_superuser", True)
        extra.setdefault("is_active", True)  # ‚úÖ —Å—É–ø–µ—Ä—é–∑–µ—Ä —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–µ–Ω (–±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        if extra.get("is_staff") is not True or extra.get("is_superuser") is not True:
            raise ValueError(_("Superuser must have is_staff=True and is_superuser=True"))
        user = self.create_user(email, password, **extra)
        return user


# --- –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def generate_qr_payload():
    return uuid4().hex

class CustomUser(AbstractBaseUser, PermissionsMixin):
    email       = models.EmailField(_("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"), unique=True)
    phone       = PhoneNumberField(_("–¢–µ–ª–µ—Ñ–æ–Ω"), blank=True, null=True)
    first_name  = models.CharField(_("–ò–º—è"), max_length=50, blank=True)
    last_name   = models.CharField(_("–§–∞–º–∏–ª–∏—è"), max_length=50, blank=True)

    is_active   = models.BooleanField(_("–ê–∫—Ç–∏–≤–µ–Ω"), default=False)
    is_staff    = models.BooleanField(_("–°–æ—Ç—Ä—É–¥–Ω–∏–∫"), default=False)
    date_joined = models.DateTimeField(_("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"), default=timezone.now)

    qr_payload  = models.CharField(_("QR Payload"), max_length=64, unique=True, default=generate_qr_payload)
    qr_code     = models.ImageField(_("QR –ö–æ–¥"), upload_to="qr_codes/", blank=True, null=True)

    USERNAME_FIELD  = "email"
    REQUIRED_FIELDS = []

    objects = CustomUserManager()

    def __str__(self):
        return self.email

    def save(self, *args, **kwargs):
        if not self.qr_code:
            img = qrcode.make(self.qr_payload)
            buf = BytesIO()
            img.save(buf, format="PNG")
            self.qr_code.save(f"{self.qr_payload}.png", ContentFile(buf.getvalue()), save=False)
        super().save(*args, **kwargs)


# --- –ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Å–±—Ä–æ—Å–∞ ---
class Verification(models.Model):
    class Purpose(models.TextChoices):
        REGISTER = "register", _("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        RESET    = "reset",    _("–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è")

    user       = models.ForeignKey(CustomUser, verbose_name=_("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
                                   on_delete=models.CASCADE, related_name="verifications")
    purpose    = models.CharField(_("–¶–µ–ª—å"), max_length=16, choices=Purpose.choices)
    code       = models.CharField(_("–ö–æ–¥"), max_length=6)  # –Ω–µ –¥–µ–ª–∞–µ–º global unique ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä—ã (user, code)
    created_at = models.DateTimeField(_("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"), auto_now_add=True)
    is_used    = models.BooleanField(_("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"), default=False)

    class Meta:
        verbose_name = _("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        verbose_name_plural = _("–ö–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        indexes = [models.Index(fields=["user", "purpose", "code"])]

    def __str__(self):
        return f"{self.user.email} [{self.purpose}] {self.code}"

    # TTL 24 —á–∞—Å–∞
    def is_expired(self):
        return timezone.now() > self.created_at + timezone.timedelta(hours=24)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    def send_email(self):
        subj = _("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏") if self.purpose == self.Purpose.REGISTER else _("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
        msg  = _("–í–∞—à –∫–æ–¥: %(code)s. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 24 —á–∞—Å–∞.") % {"code": self.code}
        send_mail(subj, msg, None, [self.user.email])


# üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
class Notification(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    message = models.TextField("–°–æ–æ–±—â–µ–Ω–∏–µ")
    is_read = models.BooleanField("–ü—Ä–æ—á–∏—Ç–∞–Ω–æ", default=False)
    created_at = models.DateTimeField("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", auto_now_add=True)

    def __str__(self):
        return f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {self.user} ‚Äî {'‚úî' if self.is_read else '‚úñ'}"

    class Meta:
        verbose_name = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        verbose_name_plural = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        ordering = ["-created_at"]